# Configuration file

##########################################################################################################
# basecosts
#--------------------------------------------------------------------------------------------------------#
# The base costs for all methods.
##########################################################################################################

basecosts {
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsIntrospection$MethodEntityGetID"=0
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsIntrospection$MethodEntityGetName"=0
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsLaser$fire"=0
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsScanner$MethodScanBlocks"=0
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsScanner$getBlockMeta"=0
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsSensor$SenseEntitiesMethod"=0
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsSensor$getMetaByID"=0
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsSensor$getMetaByName"=0
    I:org.squiddev.plethora.integration.MethodDocumentation=0
    I:org.squiddev.plethora.integration.MethodMeta=0
    I:org.squiddev.plethora.integration.MethodTransferLocations=0
    I:"org.squiddev.plethora.integration.MethodsModules$filterModules"=0
    I:"org.squiddev.plethora.integration.MethodsModules$hasModules"=0
    I:"org.squiddev.plethora.integration.MethodsModules$listModules"=0
    I:org.squiddev.plethora.integration.vanilla.method.MethodFluidHandler=0
    I:org.squiddev.plethora.integration.vanilla.method.MethodItemConsume=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsClock$getCelestialAngle"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsClock$getDay"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsClock$getMoonPhase"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsClock$getTime"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsDaylightSensor$getBlockLight"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsDaylightSensor$getSkyLight"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsDaylightSensor$hasSky"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventory$getItem"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventory$getItemMeta"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventory$list"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventory$size"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventoryTransfer$pullItems"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventoryTransfer$pushItems"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventoryWorld$MethodItemDrop"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventoryWorld$MethodItemHandlerDrop"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventoryWorld$MethodItemHandlerSuck"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKinetic$MethodEntityIsWalking"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKinetic$MethodEntityLivingDisableAI"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKinetic$launch"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKinetic$walk"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKineticEntity$MethodEntityCreeperExplode"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKineticEntity$MethodEntityEndermanTeleport"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKineticEntity$look"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsPlayerActions$use"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsVanillaTileEntities$getBrewTime"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsVanillaTileEntities$getBurnTime"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsVanillaTileEntities$getCookTime"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsVanillaTileEntities$getRemainingBurnTime"=0
    I:"org.squiddev.plethora.integration.vanilla.method.ModuleIntrospectionEntity$MethodEntityEquipment"=0
    I:"org.squiddev.plethora.integration.vanilla.method.ModuleIntrospectionEntity$MethodEntityPlayerGetEnder"=0
    I:"org.squiddev.plethora.integration.vanilla.method.ModuleIntrospectionEntity$MethodEntityPlayerInventory"=0
}


##########################################################################################################
# blacklist
#--------------------------------------------------------------------------------------------------------#
# Blacklist various providers
##########################################################################################################

blacklist {
    S:blacklistMeta <
     >
    S:blacklistMethods <
     >

    # List of mods to block.
    #  IMPORTANT: This does not block wrapping a mod's peripherals, just disables
    #  custom mod specific integration.
    S:blacklistMods <
     >

    # List of provider classes, packages or methods which are blacklisted.
    #  This will blacklist all converters, methods and transfer and meta providers
    #  matching a pattern.
    # 
    #  This only applies to classes registered through annotations and does not blacklist
    #  method builders.
    # 
    #  Valid forms:
    #  - "foo.bar." - All classes in package (note trailing period).
    #  - "foo.bar.Provider" - This class, all its members and nested classes
    #  - "foo.bar.Provider#method" - A particular method with a name
    S:blacklistProviders <
     >

    # List of tile entity classes or packages which will not be wrapped
    #  as peripherals. For example use "net.minecraft." to disable wrapping
    #  any vanilla peripheral. This does not blacklist subclasses.
    S:blacklistTileEntities <
     >
}


##########################################################################################################
# costsystem
#--------------------------------------------------------------------------------------------------------#
# Some methods have a particular cost: they
#  consume a set amount of fuel from their owner.
#  This level regenerates over time.
# 
#  *Note:* These values only apply to the default handler.
#  Other mods may add custom handlers.
##########################################################################################################

costsystem {
    # The fuel level all systems start at
    D:initial=100.0

    # The maximum fuel level an item can have
    D:limit=100.0

    # The amount of fuel regened each tick
    D:regen=10.0
}


##########################################################################################################
# testing
#--------------------------------------------------------------------------------------------------------#
# Various options for debugging and testing this mod
##########################################################################################################

testing {
    # Verify generated bytecode
    B:bytecodeVerify=false

    # Show debug messages
    B:debug=false

    # Issue an an error if a method isn't documented. If strict is turned on this will
    #  throw an exception.
    B:likeDocs=false

    # Enable strict loading mode: crash when an error is encountered
    #  when injecting methods
    B:strict=false
}


