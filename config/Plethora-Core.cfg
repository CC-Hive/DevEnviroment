# Configuration file

##########################################################################################################
# basecosts
#--------------------------------------------------------------------------------------------------------#
# The base costs for all methods.
##########################################################################################################

basecosts {
    # capture: function(pattern:string) -- Capture all chat messages matching a Lua pattern, preventing them from being said.
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsChat$capture"=0

    # clearCaptures: function() -- Remove all listeners added by capture().
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsChat$clearCaptures"=0

    # say: function(message:string) -- Send a message to everyone
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsChat$say"=0

    # tell: function(message:string) -- Send a message to yourself
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsChat$tell"=0

    # uncapture: function(pattern:string):boolean -- Remove a capture added by capture(pattern).
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsChat$uncapture"=0
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsIntrospection$MethodEntityGetID"=0
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsIntrospection$MethodEntityGetName"=0

    # getID: function():string -- Get this entity's UUID.
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsIntrospection$getID"=0

    # getMetaOwner: function():string -- Get this entity's metadata.
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsIntrospection$getMetaOwner"=0

    # getName: function():string -- Get this entity's name
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsIntrospection$getName"=0

    # fire: function(yaw:number, pitch:number, potency:number) -- Fire a laser in a set direction
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsLaser$fire"=0
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsScanner$MethodScanBlocks"=0

    # getBlockMeta: function(x:integer, y:integer, z:integer):table -- Get metadata about a nearby block
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsScanner$getBlockMeta"=0

    # scan: function():table -- Scan all blocks in the vicinity
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsScanner$scan"=0
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsSensor$SenseEntitiesMethod"=0

    # getMetaByID: function(id:string):table|nil -- Find a nearby entity by UUID
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsSensor$getMetaByID"=0

    # getMetaByName: function(name:string):table|nil -- Find a nearby entity by name
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsSensor$getMetaByName"=0

    # sense: function():table -- Scan for entities in the vicinity
    I:"org.squiddev.plethora.gameplay.modules.methods.MethodsSensor$sense"=0

    # getDocs: function([name:string]):table|string|nil -- Get the documentation for all functions or the function specified. Errors if the function cannot be found.
    I:org.squiddev.plethora.integration.MethodDocumentation=0

    # getMetadata: function():table -- Get metadata about this object
    I:org.squiddev.plethora.integration.MethodMeta=0

    # getTransferLocations: function([location:string]):table -- Get a list of all available objects which can be transferred to or from
    I:org.squiddev.plethora.integration.MethodTransferLocations=0

    # filterModules: function(names:string...):table|nil -- Gets the methods which require these modules
    I:"org.squiddev.plethora.integration.MethodsModules$filterModules"=0

    # hasModule: function(name:string):boolean -- Checks whether a module is available
    I:"org.squiddev.plethora.integration.MethodsModules$hasModule"=0
    I:"org.squiddev.plethora.integration.MethodsModules$hasModules"=0

    # listModules: function():table -- Lists all modules available
    I:"org.squiddev.plethora.integration.MethodsModules$listModules"=0

    # getTanks: function(side:string):table -- Get a list of all tanks on this side
    I:org.squiddev.plethora.integration.vanilla.method.MethodFluidHandler=0

    # consume: function() -- Consume one item from this stack
    I:org.squiddev.plethora.integration.vanilla.method.MethodItemConsume=0

    # getCelestialAngle: function():number -- The angle the sun or moon lies at in degrees. 0 is directly overhead.
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsClock$getCelestialAngle"=0

    # getDay: function():integer -- The current day of this world
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsClock$getDay"=0

    # getMoonPhase: function():number -- The current phase of the moon
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsClock$getMoonPhase"=0

    # getTime: function():integer -- The game time in ticks
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsClock$getTime"=0

    # getBlockLight: function():int -- The light level from surrounding blocks
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsDaylightSensor$getBlockLight"=0

    # getSkyLight: function():int -- The light level from the sun
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsDaylightSensor$getSkyLight"=0

    # getWeather: function():string -- The weather in the current world
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsDaylightSensor$getWeather"=0

    # hasSky: function():boolean -- Whether this world has a sky
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsDaylightSensor$hasSky"=0

    # getItem: function(slot:integer):table|nil -- The item in the specified slot. The slot number starts from 1.
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventory$getItem"=0

    # getItemMeta: function(slot:integer):table|nil -- The metadata of the item in the specified slot. The slot number starts from 1.
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventory$getItemMeta"=0

    # list: function():table -- List all items in this inventory
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventory$list"=0

    # size: function():integer -- The size of the inventory
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventory$size"=0

    # pullItems: function(from:string, fromSlot:int[, limit:int][, toSlot:int]):int -- Pull items to this inventory from another inventory. Returns the amount transferred.
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventoryTransfer$pullItems"=0

    # pushItems: function(to:string, fromSlot:int[, limit:int][, toSlot:int]):int -- Push items from this inventory to another inventory. Returns the amount transferred.
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventoryTransfer$pushItems"=0

    # drop: function([limit:int][, direction:string]):int -- Drop an item on the ground. Returns the number of items dropped
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventoryWorld$MethodItemDrop"=0

    # drop: function(slot:int[, limit:int][, direction:string]):int -- Drop an item on the ground. Returns the number of items dropped
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventoryWorld$MethodItemHandlerDrop"=0

    # suck: function([slot:int][, limit:int]):int -- Suck an item from the ground
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsInventoryWorld$MethodItemHandlerSuck"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKinetic$MethodEntityIsWalking"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKinetic$MethodEntityLivingDisableAI"=0

    # disableAI: function() -- Disable the AI of this entity. Be warned: this permanently scars them - they'll never be the same again!
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKinetic$disableAI"=0

    # isWalking: function():boolean -- Whether the entity is currently walking somewhere
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKinetic$isWalking"=0

    # launch: function(yaw:number, pitch:number, power:number) -- Launch the entity in a set direction
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKinetic$launch"=0

    # walk: function(x:number, y:number, z:number):boolean, string|nil -- Walk to a coordinate
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKinetic$walk"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKineticEntity$MethodEntityCreeperExplode"=0
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKineticEntity$MethodEntityEndermanTeleport"=0

    # explode: function() -- Explode this creeper
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKineticEntity$explode"=0

    # look: function(yaw:number, pitch:number) -- Look in a set direction
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKineticEntity$look"=0

    # propel: function(velocity:number) -- Propel this minecart in along the track.
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKineticEntity$propel"=0

    # shoot: function(potency:number) -- Fire an arrow in the direction the skeleton is looking
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKineticEntity$shoot"=0

    # teleport: function(x:number, y:number, z:number) -- Teleport to a position relative to the current one
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsKineticEntity$teleport"=0

    # playNote: function(instrument:string|number, pitch:number[, volume:number]) -- Plays a note block note
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsNoteblock$playNote"=0

    # playSound: function(sound:string[, pitch:number][, volume:number]) -- Play a sound
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsNoteblock$playSound"=0

    # swing: function():boolean, string|nil -- Left click with this item. Returns the action taken.
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsPlayerActions$swing"=0

    # use: function([duration:integer]):boolean, string|nil -- Right click with this item. Returns the action taken.
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsPlayerActions$use"=0

    # getBrewTime: function():int -- Number of ticks the current potion has brewed for
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsVanillaTileEntities$getBrewTime"=0

    # getBurnTime: function():int -- Number of ticks of burning the current fuel provides
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsVanillaTileEntities$getBurnTime"=0

    # getCookTime: function():int -- Number of ticks the current item has cooked for
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsVanillaTileEntities$getCookTime"=0

    # getRemainingBurnTime: function():int -- Number of ticks of fuel left
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsVanillaTileEntities$getRemainingBurnTime"=0

    # getSignText: function():table -- Each line of text on this sign
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsVanillaTileEntities$getSignText"=0

    # setSignText: function(lines...:string) -- Set the lines of text on this sign
    I:"org.squiddev.plethora.integration.vanilla.method.MethodsVanillaTileEntities$setSignText"=0
    I:"org.squiddev.plethora.integration.vanilla.method.ModuleIntrospectionEntity$MethodEntityEquipment"=0
    I:"org.squiddev.plethora.integration.vanilla.method.ModuleIntrospectionEntity$MethodEntityPlayerGetEnder"=0
    I:"org.squiddev.plethora.integration.vanilla.method.ModuleIntrospectionEntity$MethodEntityPlayerInventory"=0

    # getEnder: function():table -- Get this player's ender chest
    I:"org.squiddev.plethora.integration.vanilla.method.ModuleIntrospectionEntity$getEnder"=0

    # getEquipment: function():table -- Get this entity's held item and armor
    I:"org.squiddev.plethora.integration.vanilla.method.ModuleIntrospectionEntity$getEquipment"=0

    # getInventory: function():table -- Get this player's inventory
    I:"org.squiddev.plethora.integration.vanilla.method.ModuleIntrospectionEntity$getInventory"=0
}


##########################################################################################################
# blacklist
#--------------------------------------------------------------------------------------------------------#
# Blacklist various providers
##########################################################################################################

blacklist {
    S:blacklistMeta <
     >
    S:blacklistMethods <
     >

    # List of mods to block.
    #  IMPORTANT: This does not block wrapping a mod's peripherals, just disables
    #  custom mod specific integration.
    S:blacklistMods <
     >

    # List of modules to blacklist.
    S:blacklistModules <
     >

    # List of modules to blacklist from being mounted on a minecart.
    # 
    #  This includes all blacklisted modules.
    S:blacklistModulesMinecart <
     >

    # List of modules to blacklist from being mounted on a pocket computer.
    # 
    #  This includes all blacklisted modules.
    S:blacklistModulesPocket <
     >

    # List of modules to blacklist from being mounted from a tile.
    # 
    #  For instance, the note block tile exposes the minecraft:noteblock module, allowing
    #  you to use that module from the tile's peripheral, rather than through a manipulator.
    # 
    #  This includes all blacklisted modules.
    S:blacklistModulesTile <
     >

    # List of modules to blacklist from being mounted on a turtle.
    # 
    #  This includes all blacklisted modules.
    S:blacklistModulesTurtle <
     >

    # List of provider classes, packages or methods which are blacklisted.
    #  This will blacklist all converters, methods and transfer and meta providers
    #  matching a pattern.
    # 
    #  This only applies to classes registered through annotations and does not blacklist
    #  method builders.
    # 
    #  Valid forms:
    #  - "foo.bar." - All classes in package (note trailing period).
    #  - "foo.bar.Provider" - This class, all its members and nested classes
    #  - "foo.bar.Provider#method" - A particular method with a name
    S:blacklistProviders <
     >

    # List of tile entity classes or packages which will not be wrapped
    #  as peripherals. For example use "net.minecraft." to disable wrapping
    #  any vanilla peripheral. This does not blacklist subclasses.
    S:blacklistTileEntities <
     >
}


##########################################################################################################
# costsystem
#--------------------------------------------------------------------------------------------------------#
# Some methods have a particular cost: they
#  consume a set amount of energy from their owner.
#  This level regenerates over time.
# 
#  *Note:* These values only apply to the default handler.
#  Other mods may add custom handlers.
##########################################################################################################

costsystem {
    # Allow costs to go into the negative.
    #  Methods will fail when there is negative energy.
    #  This allows you to use costs higher than the allocated
    #  buffer and so have a more traditional rate-limiting system.
    B:allowNegative=false

    # The energy level all systems start at
    D:initial=100.0

    # The maximum energy level an item can have
    D:limit=100.0

    # The amount of energy regenerated each tick
    D:regen=10.0
}


##########################################################################################################
# testing
#--------------------------------------------------------------------------------------------------------#
# Various options for debugging and testing this mod
##########################################################################################################

testing {
    # Verify generated bytecode for built methods.
    #  Only needed if you're developing new method builders.
    B:bytecodeVerify=false

    # Show debug messages
    B:debug=false

    # Issue an an error if a method isn't documented.
    #  If strict is turned on this will throw an exception.
    B:likeDocs=false

    # Enable strict loading mode: crash when an error is encountered
    #  when injecting methods
    B:strict=false
}


